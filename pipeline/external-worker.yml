# YAML anchors
shared:
  - &aws-ami-cleaner
    task: aws-ami-cleaner
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/aws-ami-cleaner
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
        AWS_NAME_PATTERNS: >
                  [
                   "((project))_worker_((env))_"
                  ]

  # Task : connect on vault API with approle and generate a token from it.
  # Also provide some extra vars like external_worker_image for terraform
  - &extract-vars
    task: extract-vars
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: latest
      run:
        path: /usr/bin/vault-approle-login
      outputs:
      - name: extracted-vars
        path: extracted-vars
    params:
      VAULT_ROLEID: ((vault.role_id))
      VAULT_SECRETID: ((vault.secret_id))
      VARS_TF_PATH: extracted-vars/terraform.tfvars
      SCHEDULER_API_ADDRESS: ((scheduler_api_address))

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
      path: /bin/sh
      args:
      - -ec
      - |
        /usr/bin/merge-stack-and-config
        # external_worker_image
        VERSION=$(curl -s "${SCHEDULER_API_ADDRESS}/api/v1/info" | jq -r '.version')
        mkdir -p merged-stack/group_vars
        echo "concourse_version: \"${VERSION}\"" | tee -a merged-stack/group_vars/all
    outputs:
    - name: merged-stack
      path: "merged-stack"


groups:

- name: all
  jobs:
  - terraform-plan-((project))-((env))
  - terraform-apply-((project))-((env))
  - build-ami-((project))-worker-((env))
  #- terraform-apply-((project))-worker-launchconfig-((env))
  - deploy-((project))-((env))
  - clean-worker-ami

- name: terraform-((project))-((env))
  jobs:
  - terraform-plan-((project))-((env))
  - terraform-apply-((project))-((env))

- name: ((project))-((env))
  jobs:
  - build-ami-((project))-worker-((env))
  #- terraform-apply-((project))-worker-launchconfig-((env))
  - deploy-((project))-((env))

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: packer
  type: docker-image
  source:
    repository: jdub/packer-resource


resources:

# Terraform by itself
- name: terraform-((project))-((env))
  type: terraform
  source:
    storage:
      bucket: ((terraform_storage_bucket_name))
      bucket_path: ((terraform_storage_bucket_path))
      region_name: ((aws_default_region))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      env: ((env))
      customer: ((customer))
      project: ((project))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The Terraform stack (will be merged with the config)
- name: ((project))-stack-terraform
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-external-worker
    branch: gl_raw_external_worker
    check_every: 2m
    paths:
      - terraform/*

# The Terraform config (will be merged with the stack)
- name: ((project))-config-terraform
  type: git
  source:
    uri: ((external-worker_config_git_repository))
    branch: ((external-worker_config_git_branch))
    check_every: 2m
    private_key: ((external-worker_config_git_key))
    paths:
      - ((project))/terraform/((env))/*

# The Ansible stack (will be merged with the config)
- name: ((project))-stack-ansible
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-external-worker
    branch: gl_raw_external_worker
    check_every: 2m
    paths:
      - ansible/*

# The Ansible config (will be merged with the stack)
- name: ((project))-config-ansible
  type: git
  source:
    uri: ((external-worker_config_git_repository))
    branch: ((external-worker_config_git_branch))
    check_every: 2m
    private_key: ((external-worker_config_git_key))
    paths:
      - ((project))/ansible/*

# The AMI builder for the worker servers (for ASG scale-up)
- name: ((project))-worker-build-ami
  type: packer
  source:
    aws_access_key_id: ((aws_access_key))
    aws_secret_access_key: ((aws_secret_key))
    region: ((aws_default_region))

jobs:

# Build a new AMI whenever there is a change in Ansible
- name: build-ami-((project))-worker-((env))
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:

    - get: ((project))-stack-ansible
      trigger: true
    - get: ((project))-config-ansible
      trigger: true

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: ((project))-config-ansible
          path: "config"
        - name: ((project))-stack-ansible
          path: "stack"
      params:
        SCHEDULER_API_ADDRESS: ((scheduler_api_address))
        CONFIG_PATH: external-worker/ansible
        STACK_PATH: ansible
        EXTRA_ANSIBLE_VARS:
            concourse_tsa_port: ((scheduler_port))
            concourse_tsa_host: ((scheduler_host))
            concourse_tsa_public_key: ((((external_worker_key)).ssh_pub))
            concourse_tsa_worker_key: ((((external_worker_key)).ssh_prv))

    - put: ((project))-worker-build-ami
      params:
        template: merged-stack/packer_template.json
        env: ((env))
        project: ((project))
        role: worker
        public_key: ((debug_public_key))
        skip_tags: deploy,notforbuild
        aws_region: ((aws_default_region))
        ansible_version: ((packer_ansible_version))

# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan-((project))-((env))
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: ((project))-worker-build-ami
        passed:
          - build-ami-((project))-worker-((env))
      - get: ((project))-stack-terraform
        trigger: true
      - get: ((project))-config-terraform
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: ((project))-config-terraform
            path: "config"
          - name: ((project))-stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: terraform

      - *extract-vars

      - put: terraform-((project))-((env))
        params:
          env_name: ((project))-((env))
          plan_only: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply-((project))-((env))
  build_logs_to_retain: 10
  plan:
    - do:
      - get: ((project))-stack-terraform
        trigger: false
        passed:
          - terraform-plan-((project))-((env))
      - get: ((project))-config-terraform
        trigger: false
        passed:
          - terraform-plan-((project))-((env))
      - get: terraform-((project))-((env))
        trigger: false
        passed:
          - terraform-plan-((project))-((env))

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: ((project))-config-terraform
            path: "config"
          - name: ((project))-stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: terraform

      - *extract-vars

      - put: terraform-((project))-((env))
        params:
          env_name: ((project))-((env))
          run_plan: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

# Merge and trigger an apply manually (no autostart of this job)
- name: deploy-((project))-((env))
  build_logs_to_retain: 10
  plan:
    - do:
      - get: ((project))-worker-build-ami
        passed:
          - build-ami-((project))-worker-((env))
        trigger: false

      - get: ((project))-stack-terraform
        trigger: false
        passed:
          - terraform-apply-((project))-((env))

      - get: ((project))-config-terraform
        trigger: false
        passed:
          - terraform-apply-((project))-((env))

      - get: terraform-((project))-((env))
        trigger: false
        passed:
          - terraform-apply-((project))-((env))

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: ((project))-config-terraform
            path: "config"
          - name: ((project))-stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: terraform

      - *extract-vars

      - put: terraform-((project))-((env))
        params:
          env_name: ((project))-((env))
          run_plan: true
          terraform_source: merged-stack/
          var_files:
              - extracted-vars/terraform.tfvars

- name: clean-worker-ami
  plan:
  - do:
    - get: ((project))-worker-build-ami
      passed:
        - deploy-((project))-((env))
      trigger: true

    - *aws-ami-cleaner
